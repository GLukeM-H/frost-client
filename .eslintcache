[{"S:\\Users\\gluke\\Projects\\frost\\client\\src\\index.js":"1","S:\\Users\\gluke\\Projects\\frost\\client\\src\\reportWebVitals.js":"2","S:\\Users\\gluke\\Projects\\frost\\client\\src\\App.js":"3","S:\\Users\\gluke\\Projects\\frost\\client\\src\\reducers\\index.js":"4","S:\\Users\\gluke\\Projects\\frost\\client\\src\\reducers\\contReducers.js":"5","S:\\Users\\gluke\\Projects\\frost\\client\\src\\actions\\index.js":"6","S:\\Users\\gluke\\Projects\\frost\\client\\src\\actions\\contentActions.js":"7","S:\\Users\\gluke\\Projects\\frost\\client\\src\\components\\AppNavBar.js":"8","S:\\Users\\gluke\\Projects\\frost\\client\\src\\store.js":"9","S:\\Users\\gluke\\Projects\\frost\\client\\src\\components\\AppBody.js":"10","S:\\Users\\gluke\\Projects\\frost\\client\\src\\reducers\\navReducers.js":"11","S:\\Users\\gluke\\Projects\\frost\\client\\src\\actions\\navActions.js":"12","S:\\Users\\gluke\\Projects\\frost\\client\\src\\helpers\\createComp.js":"13","S:\\Users\\gluke\\Projects\\frost\\client\\src\\helpers\\contentStateHelpers.js":"14","S:\\Users\\gluke\\Projects\\frost\\client\\src\\components\\content\\index.js":"15","S:\\Users\\gluke\\Projects\\frost\\client\\src\\components\\content\\Grid.js":"16","S:\\Users\\gluke\\Projects\\frost\\client\\src\\components\\content\\Paper.js":"17","S:\\Users\\gluke\\Projects\\frost\\client\\src\\components\\content\\Card.js":"18","S:\\Users\\gluke\\Projects\\frost\\client\\src\\components\\content\\Abstract.js":"19","S:\\Users\\gluke\\Projects\\frost\\client\\src\\components\\drawer\\index.js":"20","S:\\Users\\gluke\\Projects\\frost\\client\\src\\components\\drawer\\ToolsDrawer.js":"21","S:\\Users\\gluke\\Projects\\frost\\client\\src\\components\\drawer\\GridView.js":"22","S:\\Users\\gluke\\Projects\\frost\\client\\src\\components\\drawer\\PaperView.js":"23","S:\\Users\\gluke\\Projects\\frost\\client\\src\\constants\\contReducerConstants.js":"24","S:\\Users\\gluke\\Projects\\frost\\client\\src\\constants\\navReducerConstants.js":"25","S:\\Users\\gluke\\Projects\\frost\\client\\src\\constants\\appBody.js":"26"},{"size":549,"mtime":1615095208171,"results":"27","hashOfConfig":"28"},{"size":362,"mtime":499162500000,"results":"29","hashOfConfig":"28"},{"size":2686,"mtime":1615532882152,"results":"30","hashOfConfig":"28"},{"size":265,"mtime":1612761594791,"results":"31","hashOfConfig":"28"},{"size":2621,"mtime":1615193477632,"results":"32","hashOfConfig":"28"},{"size":142,"mtime":1612146062465,"results":"33","hashOfConfig":"28"},{"size":2732,"mtime":1615163138141,"results":"34","hashOfConfig":"28"},{"size":6978,"mtime":1615452723094,"results":"35","hashOfConfig":"28"},{"size":416,"mtime":1611122304047,"results":"36","hashOfConfig":"28"},{"size":4758,"mtime":1615531939291,"results":"37","hashOfConfig":"28"},{"size":562,"mtime":1615094710733,"results":"38","hashOfConfig":"28"},{"size":294,"mtime":1613624292705,"results":"39","hashOfConfig":"28"},{"size":449,"mtime":1613537171896,"results":"40","hashOfConfig":"28"},{"size":1878,"mtime":1615163567879,"results":"41","hashOfConfig":"28"},{"size":132,"mtime":1614585275600,"results":"42","hashOfConfig":"28"},{"size":2239,"mtime":1615615877455,"results":"43","hashOfConfig":"28"},{"size":2040,"mtime":1615615577175,"results":"44","hashOfConfig":"28"},{"size":3435,"mtime":1615160204817,"results":"45","hashOfConfig":"28"},{"size":6382,"mtime":1615616350104,"results":"46","hashOfConfig":"28"},{"size":71,"mtime":1615005347131,"results":"47","hashOfConfig":"28"},{"size":6263,"mtime":1615449385123,"results":"48","hashOfConfig":"28"},{"size":6771,"mtime":1615449524290,"results":"49","hashOfConfig":"28"},{"size":4523,"mtime":1615449545463,"results":"50","hashOfConfig":"28"},{"size":449,"mtime":1614917836003,"results":"51","hashOfConfig":"28"},{"size":105,"mtime":1613959438161,"results":"52","hashOfConfig":"28"},{"size":62,"mtime":1615095387637,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"1370067",{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":"61","usedDeprecatedRules":"56"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"56"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"56"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"56"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"56"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"56"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"114"},"S:\\Users\\gluke\\Projects\\frost\\client\\src\\index.js",[],["115","116"],"S:\\Users\\gluke\\Projects\\frost\\client\\src\\reportWebVitals.js",[],"S:\\Users\\gluke\\Projects\\frost\\client\\src\\App.js",["117","118"],"import React from 'react';\nimport AppBody from './components/AppBody';\nimport AppNavBar from './components/AppNavBar';\nimport ToolsDrawer from './components/drawer';\nimport Grid from '@material-ui/core/Grid';\nimport { makeStyles } from '@material-ui/core/styles';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: \"#486d99\",\n      translucent: \"rgba(72,109,153,0.7)\"\n    },\n    secondary: {\n      main: \"#8c4f5a\"\n    },\n    neutral: {\n      main: \"#e5e5ec\",\n      light: \"#f8f8ff\",\n      translucent: \"rgba(229,229,236,0.7)\",\n      translucentLight: \"rgba(248,248,255,0.7)\"\n    }\n  },\n  mixins: {\n    drawer: {\n      [\"@media (min-width:0px)\"] : {\n        width: \"100vw\"\n      },\n      [\"@media (min-width:600px)\"] : {\n        width: \"20rem\"\n      }\n    },\n    navBackground: {\n      ...(CSS.supports('backdrop-filter', 'blur(20px)') ? {\n        backdropFilter: \"blur(20px)\",\n        backgroundColor: \"rgba(248,248,255,0.7)\"\n      } : {\n        backgroundColor: \"ghostwhite\"\n      }\n      \n      )\n    }\n  },\n  overrides: {\n    MuiButton: {\n      root: {\n        minWidth: \"2rem\",\n      },\n    },\n  }\n});\n\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    backgroundColor: \"ghostwhite\",\n  },\n  app: {\n    textAlign: \"center\",\n    position: \"relative\"\n  },\n  navbarContainer: {\n    position: \"fixed\",\n    width: \"100vw\",\n    zIndex: theme.zIndex.appBar,\n    ...theme.mixins.navBackground\n  },\n  drawer: {\n    zIndex: theme.zIndex.drawer,\n    ...theme.mixins.navBackground\n  },\n  bodyItem: {\n    zIndex: 0,\n    marginTop: theme.mixins.toolbar.minHeight,\n    [`${theme.breakpoints.up('xs')} and (orientation: landscape)`]: {\n      marginTop: theme.mixins.toolbar[`${theme.breakpoints.up('xs')} and (orientation: landscape)`].minHeight\n    },\n    [theme.breakpoints.up('sm')]: {\n      marginTop: theme.mixins.toolbar[theme.breakpoints.up('sm')].minHeight\n    }\n  },\n  blurred: {\n    filter: \"blur(10px)\",\n    height: \"70px\",\n    width: \"100%\",\n    overflow: \"hidden\",\n    position: \"fixed\"\n  }\n}));\n\nfunction App() {\n  const classes = useStyles();\n\n  return (\n    <ThemeProvider theme={theme}>\n      <div className={classes.root}>\n        <Grid container className={classes.app}>\n          <Grid item xs={12} className={classes.navbarContainer}>\n            <AppNavBar/>\n          </Grid>\n          <Grid item className={classes.bodyItem} xs={12}>\n            <AppBody/>\n          </Grid>\n          <ToolsDrawer className={classes.drawer} />\n        </Grid>\n      </div>\n    </ThemeProvider>\n  );\n}\n\n\nexport default App;\n","S:\\Users\\gluke\\Projects\\frost\\client\\src\\reducers\\index.js",[],"S:\\Users\\gluke\\Projects\\frost\\client\\src\\reducers\\contReducers.js",[],"S:\\Users\\gluke\\Projects\\frost\\client\\src\\actions\\index.js",[],"S:\\Users\\gluke\\Projects\\frost\\client\\src\\actions\\contentActions.js",[],"S:\\Users\\gluke\\Projects\\frost\\client\\src\\components\\AppNavBar.js",["119","120","121","122"],"import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { navActions, contActions } from '../actions';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuList from '@material-ui/core/MenuList';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport Grow from '@material-ui/core/Grow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Popper from '@material-ui/core/Popper';\r\nimport ClickAwayListener from '@material-ui/core/ClickAwayListener';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport clsx from 'clsx';\r\n\r\n/*~~~~~ Styles ~~~~~*/\r\nconst useStyles = makeStyles(theme => {\r\n    const smBreakpoint = theme.breakpoints.up('sm');\r\n    const drawer = theme.mixins.drawer;\r\n    const transitions = theme.transitions;\r\n    const palette = theme.palette;\r\n    return {\r\n        appNav: {\r\n            flexGrow: 1,\r\n            color: palette.primary.dark,\r\n            ...theme.mixins.navBackground\r\n        },\r\n        // appBar: {\r\n        //     transition: transitions.create(['margin', 'width'], {\r\n        //         easing: transitions.easing.sharp,\r\n        //         duration: transitions.duration.leavingScreen,\r\n        //     })\r\n        // },\r\n        // appBarShift: {\r\n        //     width: `calc(100% - ${drawer[smBreakpoint].width}px)`,\r\n        //     marginLeft: drawer[smBreakpoint].width,\r\n        //     transition: transitions.create(['margin', 'width'], {\r\n        //         easing: transitions.easing.easeOut,\r\n        //         duration: transitions.duration.enteringScreen,\r\n        //     })\r\n        // },\r\n        menuButton: {\r\n        marginRight: theme.spacing(2),\r\n        outline: \"0px !important\"\r\n        },\r\n        title: {\r\n        flexGrow: 1,\r\n        textAlign: \"start\"\r\n        },\r\n        userMenu: {\r\n            color: palette.primary.dark,\r\n            outline: \"0px !important\",\r\n            textTransform: \"capitalize\",\r\n            fontSize: \"1rem\"\r\n        },\r\n        userPopper: {\r\n            backgroundColor: palette.neutral.light\r\n        }\r\n    }\r\n});\r\n\r\n/*~~~~~ Components ~~~~~*/\r\nconst UserMenu = connect(state => ({\r\n    editing: state.contentState.editing,\r\n}),\r\n{\r\n    toggleEditing: contActions.toggleEditing,\r\n    toggleTools: navActions.toggleTools\r\n})(props => {\r\n    const style = useStyles();\r\n    const [open, setOpen] = React.useState(false);\r\n    const anchorRef = React.useRef(null);\r\n    \r\n    const handleToggle = () => {\r\n      setOpen(open => !open);\r\n    };\r\n  \r\n    const handleClose = (event) => {\r\n        if (!(anchorRef.current && anchorRef.current.contains(event.target))) {\r\n            setOpen(false);\r\n        }\r\n    };\r\n\r\n    const handleEditing = () => {\r\n        props.toggleTools();\r\n        props.toggleEditing();\r\n        setOpen(false);\r\n    }\r\n  \r\n    // return focus to the button when we transitioned from !open -> open\r\n    const prevOpen = React.useRef(open);\r\n    React.useEffect(() => {\r\n      if (prevOpen.current === true && open === false) {\r\n        anchorRef.current.focus();\r\n      }\r\n      prevOpen.current = open;\r\n    }, [open]);\r\n  \r\n    return (\r\n        <>  {props.editing && (\r\n                <Typography component=\"i\">Editing</Typography>\r\n            )}\r\n            <Button\r\n                ref={anchorRef}\r\n                aria-controls={open ? 'menu-list-grow' : undefined}\r\n                aria-haspopup=\"true\"\r\n                onClick={handleToggle}\r\n                className={style.userMenu}\r\n            >\r\n                <AccountCircleIcon/>\r\n                Luke\r\n            </Button>\r\n            <Popper open={open} anchorEl={anchorRef.current} role={undefined} placement=\"bottom-end\" transition disablePortal>\r\n                {({ TransitionProps }) => (\r\n                    <Grow\r\n                        {...TransitionProps}\r\n                        style={{ transformOrigin: 'center top' }}\r\n                    >\r\n                        <Paper className={style.userPopper}>\r\n                            <ClickAwayListener onClickAway={handleClose}>\r\n                                <MenuList autoFocusItem={open} id=\"menu-list-grow\">\r\n                                    <MenuItem onClick={handleClose}>Profile</MenuItem>\r\n                                    <MenuItem onClick={handleClose}>My account</MenuItem>\r\n                                    <MenuItem onClick={handleClose}>Logout</MenuItem>\r\n                                    <Divider />\r\n                                    {props.editing ? [\r\n                                            <MenuItem key={0} onClick={handleEditing}>\r\n                                                <Typography color=\"textPrimary\">Save and Publish</Typography>\r\n                                            </MenuItem>,\r\n                                            <MenuItem key={1} onClick={handleEditing}>\r\n                                                <Typography color=\"textSecondary\">Discard Changes</Typography>\r\n                                            </MenuItem>\r\n                                        ] : (<MenuItem onClick={handleEditing}>Edit Page</MenuItem>)\r\n                                    }\r\n                                </MenuList>\r\n                            </ClickAwayListener>\r\n                        </Paper>\r\n                    </Grow>\r\n                )}\r\n            </Popper>\r\n        </>\r\n    );\r\n})\r\n\r\nfunction AppNavBar(props) {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className={classes.appNav}>\r\n            <AppBar\r\n                position=\"static\"\r\n                color=\"transparent\"\r\n                // className={clsx(\r\n                //     classes.appBar,\r\n                //     {[classes.appBarShift]: props.toolsOpen}\r\n                // )}\r\n            >\r\n                <Toolbar>\r\n                    <IconButton className={classes.menuButton} edge=\"start\" color=\"inherit\">\r\n                        <MenuIcon />\r\n                    </IconButton>\r\n                    <Typography variant=\"h5\" className={classes.title}>\r\n                        Spades\r\n                    </Typography>\r\n                    <UserMenu />\r\n                </Toolbar>\r\n            </AppBar>\r\n        </div>\r\n    );\r\n}\r\n\r\nAppNavBar.propTypes = {\r\n    toggleNav: PropTypes.func.isRequired,\r\n    navIsOpen: PropTypes.bool.isRequired\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    navIsOpen: state.navState.navIsOpen,\r\n    toolsOpen: state.navState.toolsOpen\r\n})\r\n\r\n\r\n export default connect(mapStateToProps, {\r\n     toggleNav: navActions.toggleNav\r\n})(AppNavBar);","S:\\Users\\gluke\\Projects\\frost\\client\\src\\store.js",[],"S:\\Users\\gluke\\Projects\\frost\\client\\src\\components\\AppBody.js",["123"],"import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { contActions } from '../actions';\r\nimport { ROOT_COMP } from '../constants/contReducerConstants';\r\n// import { DRAWER_WIDTH, DURATION } from '../constants/appBody';\r\nimport * as comp from './content';\r\nimport clsx from 'clsx';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport { Transition } from 'react-transition-group';\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport Fade from '@material-ui/core/Fade';\r\n  \r\nconst useStyles = makeStyles(theme => {\r\n  const toolbar = theme.mixins.toolbar;\r\n  const drawer = theme.mixins.drawer;\r\n  const smBreakpoint = theme.breakpoints.up('sm');\r\n  const xsBreakpoint = theme.breakpoints.up('xs');\r\n  const mdBreakpoint = theme.breakpoints.up('md');\r\n  return { \r\n    defaultBody: {\r\n      display: \"flex\",\r\n      flexWrap: \"wrap\",\r\n      justifyContent: \"center\",\r\n      paddingLeft: \"0\",\r\n      transition: `padding-left ${theme.transitions.duration.standard}ms cubic-bezier(.6,.01,.51,1.01)`,\r\n      paddingTop: \"1rem\",\r\n      minHeight: `calc(100vh - ${toolbar.minHeight}px)`,\r\n      [`${xsBreakpoint} and (orientation: landscape)`]: {\r\n        minHeight: `calc(\r\n          100vh - ${toolbar[`${xsBreakpoint} and (orientation: landscape)`].minHeight}px\r\n        )`\r\n      },\r\n      [mdBreakpoint]: {\r\n        flexWrap: \"nowrap\"\r\n      },\r\n      [smBreakpoint]: {\r\n        minHeight: `calc(100vh - ${toolbar[smBreakpoint].minHeight}px)`,\r\n      },\r\n    },\r\n    enteringBody: {\r\n      [xsBreakpoint]: {\r\n        width: \"0\"\r\n      },\r\n      [mdBreakpoint]: {\r\n        width: `calc(${drawer[smBreakpoint].width})`\r\n      }\r\n    },\r\n    enteredBody: {\r\n      [xsBreakpoint]: {\r\n        width: \"0\"\r\n      },\r\n      [mdBreakpoint]: {\r\n        width: `calc(${drawer[smBreakpoint].width})`\r\n      }\r\n    },\r\n    exitingBody: {\r\n      width: \"0\"\r\n    },\r\n    exitedBody: {\r\n      width: \"0\"\r\n    },\r\n    grow: {\r\n      flexShrink: 0,\r\n      backgroundColor: \"#0000ff\",\r\n      transition: `width ${theme.transitions.duration.standard}ms cubic-bezier(.6,.01,.51,1.01)`,\r\n    },\r\n    leftItem: {\r\n      backgroundColor: \"#00ff00\",\r\n      flexShrink: 1,\r\n      overflowX: \"hidden\"\r\n    },\r\n    middleItem: {\r\n      height: \"100%\",\r\n      flexShrink: 0\r\n    },\r\n    rightItem: {\r\n      backgroundColor: \"#ff0000\",\r\n      flexShrink: 1,\r\n      overflowX: \"hidden\"\r\n    },\r\n    backdrop: {\r\n      zIndex: theme.zIndex.drawer + 1,\r\n      color: theme.palette.primary.light,\r\n      backgroundColor: 'rgba(0,0,0,0)'\r\n    }\r\n  }\r\n});\r\n\r\nfunction LoadingBackdrop(props) {\r\n  const theme = useTheme();\r\n  const classes = useStyles();\r\n\r\n  return (\r\n      <Backdrop\r\n        className={classes.backdrop}\r\n        open={props.loading}\r\n        transitionDuration={{\r\n          enter: theme.transitions.duration.enteringScreen,\r\n          exit: theme.transitions.duration.leavingScreen\r\n        }}\r\n      >\r\n        <CircularProgress color=\"inherit\" />\r\n      </Backdrop>\r\n  );\r\n}\r\n\r\nfunction AppBody(props) {\r\n    const theme = useTheme();\r\n    const classes = useStyles();\r\n\r\n    React.useEffect(() => {\r\n        props.getBody();\r\n    }, []);\r\n\r\n    return (\r\n      <>\r\n        <Transition in={props.toolsOpen} timeout={theme.transitions.duration.standard}>\r\n          {state => (\r\n            <Grid container className={clsx(classes.defaultBody)}>\r\n              <Grid item className={clsx(classes.grow, classes[`${state}Body`])} />\r\n              <Grid item className={classes.leftItem} md={2} xs={12}>left</Grid>\r\n              <Grid item className={classes.middleItem} md={8} xs={12}>\r\n                <Fade in={!props.loading} timeout={theme.transitions.duration.standard}>\r\n                  <div>\r\n                      {React.createElement((comp[props.rootComp.comp] || props.rootComp.comp), {id: ROOT_COMP})}\r\n                  </div>\r\n                </Fade>\r\n              </Grid>\r\n              <Grid item className={classes.rightItem} md={2} xs={12}>right</Grid>\r\n            </Grid>\r\n          )}\r\n        </Transition>\r\n        <LoadingBackdrop loading={props.loading} />\r\n      </>\r\n    );\r\n}\r\n\r\n\r\nAppBody.propTypes = {\r\n    getBody: PropTypes.func.isRequired,\r\n    rootComp: PropTypes.object.isRequired,\r\n    toolsOpen: PropTypes.bool.isRequired,\r\n    loading: PropTypes.bool.isRequired\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    rootComp: state.contentState.contentComp[ROOT_COMP],\r\n    toolsOpen: state.navState.toolsOpen,\r\n    loading: state.contentState.loading\r\n})\r\n\r\nexport default connect(mapStateToProps, { getBody: contActions.getBody })(AppBody);","S:\\Users\\gluke\\Projects\\frost\\client\\src\\reducers\\navReducers.js",[],"S:\\Users\\gluke\\Projects\\frost\\client\\src\\actions\\navActions.js",[],"S:\\Users\\gluke\\Projects\\frost\\client\\src\\helpers\\createComp.js",[],["124","125"],"S:\\Users\\gluke\\Projects\\frost\\client\\src\\helpers\\contentStateHelpers.js",[],"S:\\Users\\gluke\\Projects\\frost\\client\\src\\components\\content\\index.js",[],"S:\\Users\\gluke\\Projects\\frost\\client\\src\\components\\content\\Grid.js",[],"S:\\Users\\gluke\\Projects\\frost\\client\\src\\components\\content\\Paper.js",[],"S:\\Users\\gluke\\Projects\\frost\\client\\src\\components\\content\\Card.js",[],"S:\\Users\\gluke\\Projects\\frost\\client\\src\\components\\content\\Abstract.js",["126","127","128"],"S:\\Users\\gluke\\Projects\\frost\\client\\src\\components\\drawer\\index.js",[],"S:\\Users\\gluke\\Projects\\frost\\client\\src\\components\\drawer\\ToolsDrawer.js",["129","130","131","132","133","134","135","136"],"import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { navActions, contActions } from '../../actions';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport GridView from './GridView';\r\nimport PaperView from './PaperView';\r\nimport clsx from 'clsx';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport Breadcrumbs from '@material-ui/core/Breadcrumbs';\r\nimport Link from '@material-ui/core/Link';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Button from '@material-ui/core/Button';\r\nimport PublishIcon from '@material-ui/icons/Publish';\r\nimport ExpandLess from '@material-ui/icons/ExpandLess';\r\nimport ExpandMore from '@material-ui/icons/ExpandMore';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Collapse from '@material-ui/core/Collapse';\r\nimport TextareaAutosize from '@material-ui/core/TextareaAutosize';\r\nimport Slider from '@material-ui/core/Slider';\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    drawer: {\r\n        flexShrink: 0,\r\n        paddingRight: \"10px\",\r\n        paddingLeft: \"10px\"\r\n    },\r\n    drawerHeader: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        padding: theme.spacing(0, 1),\r\n        // necessary for content to be below app bar\r\n        ...theme.mixins.toolbar,\r\n        justifyContent: 'flex-end'\r\n    },\r\n    drawerPaper: {\r\n        ...theme.mixins.navBackground,\r\n        ...theme.mixins.drawer\r\n    },\r\n    collapse: {\r\n        backgroundColor: theme.palette.neutral.main,\r\n        padding: theme.spacing(2)\r\n    },\r\n    textArea: {\r\n        width: \"100%\"\r\n    },\r\n    sizeCollapse: {\r\n        paddingTop: theme.spacing(3),\r\n        paddingRight: theme.spacing(3),\r\n        paddingLeft: theme.spacing(3)\r\n    }\r\n}));\r\n\r\nfunction ComponentView(props) {\r\n    return (\r\n        <>\r\n            <List>\r\n                <ListItem>\r\n                    <Breadcrumbs aria-label=\"breadcrumb\">\r\n                        <Typography color=\"textPrimary\" variant=\"h6\">Component</Typography>\r\n                    </Breadcrumbs>            \r\n                </ListItem>    \r\n            </List>\r\n            <Divider />\r\n            <List dense>\r\n                <ListItem button>\r\n                    <ListItemText primary=\"Highlight Containers\" />\r\n                </ListItem>\r\n                <ListItem button>\r\n                    <ListItemText primary=\"Highlight Items\" />\r\n                </ListItem>\r\n                <ListItem button>\r\n                    <ListItemText primary=\"Start from scratch\" />\r\n                </ListItem>\r\n            </List>\r\n        </>\r\n    );\r\n}\r\n\r\nfunction ToolsDrawer(props) {\r\n    \r\n    const classes = useStyles();\r\n\r\n    const handleView = (view) => {\r\n        props.setToolsView(view);\r\n        props.setSelected('');\r\n    }\r\n\r\n    const handleClose = () => {\r\n        props.toggleTools();\r\n        props.toggleEditing();\r\n    }\r\n\r\n    const handleInsert = (compName, compProps) => {\r\n        props.insertComp(compName, props.selected, null, compProps);\r\n    }\r\n\r\n    const handleSave = () => {\r\n        props.saveBody(props.contentComp, props.contentCompId);\r\n    }\r\n\r\n    let view;\r\n    if (props.selected) {\r\n        let id = props.selected;\r\n        let breadcrumbs = [];\r\n        while (id) {\r\n            breadcrumbs.unshift([ id, props.contentComp[id].comp])\r\n            id = props.contentComp[id].parentId;\r\n        }\r\n    \r\n        switch (props.contentComp[props.selected].comp){\r\n            case \"Grid\":\r\n                view = <GridView breadcrumbs={breadcrumbs} />\r\n                break;\r\n            case \"Paper\":\r\n                view = <PaperView breadcrumbs={breadcrumbs} />\r\n                break;\r\n            default:\r\n                view = (<ComponentView handleView={handleView} insertComp={handleInsert} />);\r\n        }\r\n    } else {\r\n        switch (props.toolsView) {\r\n            default:\r\n                view = (<ComponentView handleView={handleView} insertComp={handleInsert} />);\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <Drawer\r\n            className={classes.drawer}\r\n            classes={{paper: classes.drawerPaper}}\r\n            anchor=\"left\"\r\n            open={props.toolsOpen}\r\n            variant=\"persistent\"\r\n        >\r\n            <div className={classes.drawerHeader}>\r\n                <IconButton onClick={handleClose}>\r\n                    <ChevronLeftIcon />\r\n                </IconButton>\r\n            </div>\r\n            <Divider />\r\n                {view}\r\n            <Divider />\r\n            <Button onClick={handleSave} color={props.savedChanges ? \"primary\" : \"secondary\"}><PublishIcon />&ensp;Save</Button>\r\n        </Drawer>\r\n    );\r\n}\r\n\r\n\r\nToolsDrawer.propTypes = {\r\n    toolsOpen: PropTypes.bool.isRequired,\r\n    toolsView: PropTypes.string.isRequired,\r\n    toggleTools: PropTypes.func.isRequired,\r\n    setToolsView: PropTypes.func.isRequired,\r\n    toggleEditing: PropTypes.func.isRequired,\r\n    insertComp: PropTypes.func.isRequired,\r\n    saveBody: PropTypes.func.isRequired,\r\n    savedChanges: PropTypes.bool.isRequired,\r\n    contentComp: PropTypes.object.isRequired,\r\n    contentCompId: PropTypes.string.isRequired,\r\n    setSelected: PropTypes.func.isRequired,\r\n    setInner: PropTypes.func.isRequired\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    toolsOpen: state.navState.toolsOpen,\r\n    toolsView: state.navState.toolsView,\r\n    selected: state.contentState.selected,\r\n    savedChanges: state.contentState.savedChanges,\r\n    contentComp: state.contentState.contentComp,\r\n    contentCompId: state.contentState.contentCompId\r\n})\r\n\r\n\r\nexport default connect(mapStateToProps, {\r\n    toggleTools: navActions.toggleTools,\r\n    setToolsView: navActions.setToolsView,\r\n    toggleEditing: contActions.toggleEditing,\r\n    insertComp: contActions.insertComp,\r\n    saveBody: contActions.saveBody,\r\n    setSelected: contActions.setSelected,\r\n    setInner: contActions.setInner\r\n})(ToolsDrawer);\r\n","S:\\Users\\gluke\\Projects\\frost\\client\\src\\components\\drawer\\GridView.js",["137","138","139","140"],"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { contActions } from '../../actions';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport clsx from 'clsx';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Breadcrumbs from '@material-ui/core/Breadcrumbs';\r\nimport Link from '@material-ui/core/Link';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport ExpandLess from '@material-ui/icons/ExpandLess';\r\nimport ExpandMore from '@material-ui/icons/ExpandMore';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Collapse from '@material-ui/core/Collapse';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport { setProps } from '../../actions/contentActions';\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    drawer: {\r\n        backgroundColor: \"ghostwhite\",\r\n        flexShrink: 0,\r\n        paddingRight: \"10px\",\r\n        paddingLeft: \"10px\"\r\n    },\r\n    drawerHeader: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        padding: theme.spacing(0, 1),\r\n        // necessary for content to be below app bar\r\n        ...theme.mixins.toolbar,\r\n        justifyContent: 'flex-start',\r\n    },\r\n    drawerPaper: {\r\n        backdropFilter: \"blur(20px)\",\r\n        backgroundColor: \"transparent\",\r\n        width: \"300px\"\r\n    },\r\n    collapse: {\r\n        backgroundColor: theme.palette.neutral.main,\r\n        padding: theme.spacing(2)\r\n    },\r\n    textArea: {\r\n        width: \"100%\"\r\n    },\r\n    sizeCollapse: {\r\n        paddingTop: theme.spacing(3),\r\n        paddingRight: theme.spacing(3),\r\n        paddingLeft: theme.spacing(3)\r\n    },\r\n    link: {\r\n        cursor: \"pointer\"\r\n    }\r\n}));\r\n\r\n\r\n\r\nfunction GridView(props) {\r\n    const classes = useStyles();\r\n    const [sizeOpen, setSizeOpen] = React.useState(false);\r\n    const [size, setSize] = React.useState(4);\r\n    const insertComp = (compName, compProps) => props.insertComp(compName, props.selected, null, compProps);\r\n    const setProps = compProps => props.setProps(props.selected, compProps);\r\n    \r\n    React.useEffect(() => {\r\n        if (!(props.stateProps.container || props.hasChildren)) {\r\n            setProps({container: true})\r\n        }\r\n    }, [props.hasChildren])\r\n\r\n    const handleSizeChange = (event) => {\r\n      setSize(Number(event.target.value));\r\n    };\r\n\r\n    const handleAddItem = () => {\r\n        insertComp('Grid', {item: true, container: true, xs: 4});\r\n    }\r\n\r\n    const handleAddComp = (compName, compProps={}) => {\r\n        insertComp(compName, compProps);\r\n        setProps({container: false});\r\n    }\r\n    \r\n    //container item haschildren\r\n    /* add grid item\r\n    change size */\r\n\r\n    //container haschildren\r\n    /*add grid item */\r\n\r\n    //item haschildren\r\n    /*change size */\r\n\r\n    //container item nochildren\r\n    /*add grid item\r\n    change size\r\n    add components */\r\n\r\n    //container nochildren\r\n    /*add grid item */\r\n\r\n    \r\n    return (\r\n        <>\r\n            <List>\r\n                <ListItem>\r\n                    <Breadcrumbs>\r\n                        {props.breadcrumbs.map(([id, comp]) => (\r\n                            id === props.selected ? (\r\n                                <Typography key={id} color=\"textPrimary\" variant=\"h6\">{comp}</Typography>\r\n                            ) : (\r\n                                <Link\r\n                                    key={id}\r\n                                    className={classes.link}\r\n                                    onClick={() => props.setSelected(id)}\r\n                                >\r\n                                    {comp}\r\n                                </Link>\r\n                            )\r\n                        ))}\r\n                    </Breadcrumbs>\r\n                </ListItem>    \r\n            </List>\r\n            <Divider />\r\n            <List dense>\r\n                {props.stateProps.container &&\r\n                    <>\r\n                        <ListItem key={0} button onClick={handleAddItem}>\r\n                            <ListItemText primary=\"Add Grid Item\" />\r\n                        </ListItem>\r\n                    </>\r\n                }\r\n                {props.stateProps.item &&\r\n                    <>\r\n                        <ListItem button onClick={() => setSizeOpen(prevState => (!prevState))}>\r\n                        <ListItemText primary=\"Change Size\" />\r\n                            {sizeOpen ? <ExpandLess /> : <ExpandMore />}\r\n                        </ListItem>\r\n                        <Collapse in={sizeOpen}>\r\n                            <Paper\r\n                                className={clsx(classes.collapse, classes.sizeCollapse)}\r\n                                elevation={0}\r\n                                square\r\n                            >\r\n                                <Slider\r\n                                    value={props.stateProps.xs}\r\n                                    onChange={(e,xs) => setProps({xs})}\r\n                                    defaultValue={4}\r\n                                    step={1}\r\n                                    marks\r\n                                    min={1}\r\n                                    max={12}\r\n                                    valueLabelDisplay=\"auto\"\r\n                                />\r\n                            </Paper>\r\n                        </Collapse>\r\n                    </>\r\n                }\r\n                {props.stateProps.item && !props.hasChildren &&\r\n                    <>\r\n                        <ListItem button onClick={() => handleAddComp('Paper')}>\r\n                            <ListItemText primary=\"Add Paper\" />\r\n                        </ListItem>\r\n                    </>\r\n                }\r\n            </List>\r\n        </>\r\n    );\r\n}\r\n\r\n\r\nGridView.propTypes = {\r\n    insertComp: PropTypes.func.isRequired,\r\n    setSelected: PropTypes.func.isRequired,\r\n    setInner: PropTypes.func.isRequired,\r\n    setProps: PropTypes.func.isRequired,\r\n    breadcrumbs: PropTypes.array.isRequired,\r\n    stateProps: PropTypes.object.isRequired,\r\n    hasChildren: PropTypes.bool.isRequired\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    selected: state.contentState.selected,\r\n    stateProps: state.contentState.contentComp[state.contentState.selected].props,\r\n    hasChildren: Boolean(state.contentState.contentComp[state.contentState.selected].childIds.length)\r\n})\r\n\r\nexport default connect(mapStateToProps, {\r\n    setSelected: contActions.setSelected,\r\n    setProps: contActions.setProps,\r\n    setInner: contActions.setInner,\r\n    insertComp: contActions.insertComp\r\n})(GridView);","S:\\Users\\gluke\\Projects\\frost\\client\\src\\components\\drawer\\PaperView.js",["141","142"],"import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { contActions } from '../../actions';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport clsx from 'clsx';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Breadcrumbs from '@material-ui/core/Breadcrumbs';\r\nimport Link from '@material-ui/core/Link';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport ExpandLess from '@material-ui/icons/ExpandLess';\r\nimport ExpandMore from '@material-ui/icons/ExpandMore';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Collapse from '@material-ui/core/Collapse';\r\nimport TextareaAutosize from '@material-ui/core/TextareaAutosize';\r\n\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    drawer: {\r\n        backgroundColor: \"ghostwhite\",\r\n        flexShrink: 0,\r\n        paddingRight: \"10px\",\r\n        paddingLeft: \"10px\"\r\n    },\r\n    drawerHeader: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        padding: theme.spacing(0, 1),\r\n        // necessary for content to be below app bar\r\n        ...theme.mixins.toolbar,\r\n        justifyContent: 'flex-start',\r\n    },\r\n    drawerPaper: {\r\n        backdropFilter: \"blur(20px)\",\r\n        backgroundColor: \"transparent\",\r\n        width: \"300px\"\r\n    },\r\n    collapse: {\r\n        backgroundColor: theme.palette.neutral.main,\r\n        padding: theme.spacing(2)\r\n    },\r\n    textArea: {\r\n        width: \"100%\"\r\n    },\r\n    sizeCollapse: {\r\n        paddingTop: theme.spacing(3),\r\n        paddingRight: theme.spacing(3),\r\n        paddingLeft: theme.spacing(3)\r\n    },\r\n    link: {\r\n        cursor: \"pointer\"\r\n    }\r\n}));\r\n\r\n\r\nfunction PaperView(props) {\r\n    const classes = useStyles();\r\n    const [open, setOpen] = React.useState(false);\r\n    const setInner = inner => props.setInner(props.selected, inner);\r\n    const setProps = props => props.setProps(props.selected, props);\r\n\r\n    return (\r\n        <>\r\n            <List>\r\n                <ListItem>\r\n                    <Breadcrumbs>\r\n                        {props.breadcrumbs.map(([id, comp]) => (\r\n                            id === props.selected ? (\r\n                                <Typography key={id} color=\"textPrimary\" variant=\"h6\">{comp}</Typography>\r\n                            ) : (\r\n                                <Link\r\n                                    key={id}\r\n                                    className={classes.link}\r\n                                    onClick={() => props.setSelected(id)}\r\n                                >\r\n                                    {comp}\r\n                                </Link>\r\n                            )\r\n                        ))}\r\n                    </Breadcrumbs>\r\n                </ListItem>    \r\n            </List>\r\n            <Divider />\r\n            <List dense>\r\n                <ListItem button onClick={() => setOpen(!open)}>\r\n                    <ListItemText primary=\"Add Text\" />\r\n                    {open ? <ExpandLess /> : <ExpandMore />}\r\n                </ListItem>\r\n                <Collapse in={open}>\r\n                    <Paper className={classes.collapse} elevation={0} square>\r\n                        <TextareaAutosize\r\n                            className={classes.textArea}\r\n                            rowsMin={4}\r\n                            placeholder=\"Lorem ipsum, dolor sit amet consectetur adipisicing elit. Repudiandae sint quibusdam doloremque quae hic vitae?\"\r\n                            value={props.selectedInner}\r\n                            onChange={e => setInner(e.target.value)}\r\n                        />\r\n                    </Paper>\r\n                </Collapse>\r\n            </List>\r\n        </>\r\n    );\r\n}\r\n\r\n\r\nPaperView.propTypes = {\r\n    setSelected: PropTypes.func.isRequired,\r\n    insertComp: PropTypes.func.isRequired,\r\n    setInner: PropTypes.func.isRequired,\r\n    selected: PropTypes.string.isRequired,\r\n    setProps: PropTypes.func.isRequired\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    selected: state.contentState.selected,\r\n    selectedInner: state.contentState.contentComp[state.contentState.selected].inner\r\n})\r\n\r\n\r\nexport default connect(mapStateToProps, {\r\n    insertComp: contActions.insertComp,\r\n    setSelected: contActions.setSelected,\r\n    setInner: contActions.setInner,\r\n    setProps: contActions.setProps\r\n})(PaperView);\r\n","S:\\Users\\gluke\\Projects\\frost\\client\\src\\constants\\contReducerConstants.js",[],"S:\\Users\\gluke\\Projects\\frost\\client\\src\\constants\\navReducerConstants.js",[],"S:\\Users\\gluke\\Projects\\frost\\client\\src\\constants\\appBody.js",[],["143","144"],{"ruleId":"145","replacedBy":"146"},{"ruleId":"147","replacedBy":"148"},{"ruleId":"149","severity":1,"message":"150","line":29,"column":7,"nodeType":"151","messageId":"152","endLine":31,"endColumn":8,"fix":"153"},{"ruleId":"149","severity":1,"message":"154","line":32,"column":7,"nodeType":"151","messageId":"152","endLine":34,"endColumn":8,"fix":"155"},{"ruleId":"156","severity":1,"message":"157","line":20,"column":8,"nodeType":"158","messageId":"159","endLine":20,"endColumn":12},{"ruleId":"156","severity":1,"message":"160","line":24,"column":11,"nodeType":"158","messageId":"159","endLine":24,"endColumn":23},{"ruleId":"156","severity":1,"message":"161","line":25,"column":11,"nodeType":"158","messageId":"159","endLine":25,"endColumn":17},{"ruleId":"156","severity":1,"message":"162","line":26,"column":11,"nodeType":"158","messageId":"159","endLine":26,"endColumn":22},{"ruleId":"163","severity":1,"message":"164","line":116,"column":8,"nodeType":"165","endLine":116,"endColumn":10,"suggestions":"166"},{"ruleId":"145","replacedBy":"167"},{"ruleId":"147","replacedBy":"168"},{"ruleId":"156","severity":1,"message":"169","line":15,"column":8,"nodeType":"158","messageId":"159","endLine":15,"endColumn":14},{"ruleId":"156","severity":1,"message":"170","line":129,"column":12,"nodeType":"158","messageId":"159","endLine":129,"endColumn":20},{"ruleId":"163","severity":1,"message":"171","line":133,"column":8,"nodeType":"165","endLine":133,"endColumn":10,"suggestions":"172"},{"ruleId":"156","severity":1,"message":"157","line":8,"column":8,"nodeType":"158","messageId":"159","endLine":8,"endColumn":12},{"ruleId":"156","severity":1,"message":"173","line":16,"column":8,"nodeType":"158","messageId":"159","endLine":16,"endColumn":12},{"ruleId":"156","severity":1,"message":"174","line":21,"column":8,"nodeType":"158","messageId":"159","endLine":21,"endColumn":18},{"ruleId":"156","severity":1,"message":"175","line":22,"column":8,"nodeType":"158","messageId":"159","endLine":22,"endColumn":18},{"ruleId":"156","severity":1,"message":"176","line":23,"column":8,"nodeType":"158","messageId":"159","endLine":23,"endColumn":13},{"ruleId":"156","severity":1,"message":"177","line":24,"column":8,"nodeType":"158","messageId":"159","endLine":24,"endColumn":16},{"ruleId":"156","severity":1,"message":"178","line":25,"column":8,"nodeType":"158","messageId":"159","endLine":25,"endColumn":24},{"ruleId":"156","severity":1,"message":"179","line":26,"column":8,"nodeType":"158","messageId":"159","endLine":26,"endColumn":14},{"ruleId":"156","severity":1,"message":"180","line":19,"column":10,"nodeType":"158","messageId":"159","endLine":19,"endColumn":18},{"ruleId":"156","severity":1,"message":"181","line":64,"column":12,"nodeType":"158","messageId":"159","endLine":64,"endColumn":16},{"ruleId":"163","severity":1,"message":"182","line":72,"column":8,"nodeType":"165","endLine":72,"endColumn":27,"suggestions":"183"},{"ruleId":"156","severity":1,"message":"184","line":74,"column":11,"nodeType":"158","messageId":"159","endLine":74,"endColumn":27},{"ruleId":"156","severity":1,"message":"157","line":6,"column":8,"nodeType":"158","messageId":"159","endLine":6,"endColumn":12},{"ruleId":"156","severity":1,"message":"185","line":63,"column":11,"nodeType":"158","messageId":"159","endLine":63,"endColumn":19},{"ruleId":"145","replacedBy":"186"},{"ruleId":"147","replacedBy":"187"},"no-native-reassign",["188"],"no-negated-in-lhs",["189"],"no-useless-computed-key","Unnecessarily computed property [\"@media (min-width:0px)\"] found.","Property","unnecessarilyComputedProperty",{"range":"190","text":"191"},"Unnecessarily computed property [\"@media (min-width:600px)\"] found.",{"range":"192","text":"193"},"no-unused-vars","'clsx' is defined but never used.","Identifier","unusedVar","'smBreakpoint' is assigned a value but never used.","'drawer' is assigned a value but never used.","'transitions' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside React.useEffect.","ArrayExpression",["194"],["188"],["189"],"'Popper' is defined but never used.","'anchorEl' is assigned a value but never used.","React Hook React.useEffect has a missing dependency: 'props.nodeRef'. Either include it or remove the dependency array. If 'setAnchorEl' needs the current value of 'props.nodeRef', you can also switch to useReducer instead of useState and read 'props.nodeRef' in the reducer.",["195"],"'Link' is defined but never used.","'ExpandLess' is defined but never used.","'ExpandMore' is defined but never used.","'Paper' is defined but never used.","'Collapse' is defined but never used.","'TextareaAutosize' is defined but never used.","'Slider' is defined but never used.","'setProps' is defined but never used.","'size' is assigned a value but never used.","React Hook React.useEffect has missing dependencies: 'props.stateProps.container' and 'setProps'. Either include them or remove the dependency array.",["196"],"'handleSizeChange' is assigned a value but never used.","'setProps' is assigned a value but never used.",["188"],["189"],"no-global-assign","no-unsafe-negation",[780,806],"\"@media (min-width:0px)\"",[849,877],"\"@media (min-width:600px)\"",{"desc":"197","fix":"198"},{"desc":"199","fix":"200"},{"desc":"201","fix":"202"},"Update the dependencies array to be: [props]",{"range":"203","text":"204"},"Update the dependencies array to be: [props.nodeRef]",{"range":"205","text":"206"},"Update the dependencies array to be: [props.hasChildren, props.stateProps.container, setProps]",{"range":"207","text":"208"},[3317,3319],"[props]",[4170,4172],"[props.nodeRef]",[2380,2399],"[props.hasChildren, props.stateProps.container, setProps]"]